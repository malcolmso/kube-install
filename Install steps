# How to deploy Kubernetes on bare metal

# Step 1: Setting up the bare metal infrastructure
# 1 Install containerd:
sudo apt install -y containerd

# 2 Configure containerd to use SystemdCgroup:
mkdir -p /etc/containerddir
containerd config default | sudo tee /etc/containerd/config.toml

# Edit /etc/containerd/config.toml and set SystemdCgroup = true 
# This is important because Kubernetes requires all its components, and the container runtime uses systemd for cgroups. You can use the following command to do it:

sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml

# 3 Restart containerd:
systemctl restart containerd

# 4 Next, we need to install all the tools needed for Kubernetes to run
# We will install kubelet, kubeadm, and kubectl
sudo swapoff -a # to disable swapping temporarily
sudo sed -i '/[[:space:]]swap[[:space:]]/ s/^/#/' /etc/fstab # maintain swap disabled after reboot
sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
# install the necessary dependencies
sudo apt-get install -y apt-transport-https ca-certificates curl gpg socat docker.io
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
# install kubelet, kubeadm
sudo apt-get install -y kubelet kubeadm

# 5 check if all the tools were installed properly
kubelet --version
kubeadm version

# 6 Install kubectl binary with curl on Linux:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl   # install kubectl
kubectl version --client # check kubectl version


## Step 2: Initializing the control plane ##

# 1 First, enable IP forwarding by running. 
# In a Kubernetes environment, this is important for container-to-container and pod-to-pod communication across different nodes. 
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward

#2  To make this change persistent across reboots, edit /etc/sysctl.conf
nano /etc/sysctl.conf

# 3 Add or uncomment this line: 
net.ipv4.ip_forward=1

# 4 Then apply the changes:
sudo sysctl -p

# 5 Next, we need to initialize the Kubernetes control plane and set up the cluster with a specific pod network range. 
# To do this for the control plane node, run: 
## SAVE THE OUTPUT! THE TOKEN OUTPUT HERE!! *** ##
sudo kubeadm config images pull
sudo kubeadm init

## STOP!! Open new terminal!! ###

# 6 ** perform on master**
# You will need the command provided to attach a worker node. Set up kubeconfig
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To enable communication between the pods in your Kubernetes cluster, you need to install a network add-on. 
# You can install Calico with the following command: 
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

# check node
sudo kubectl get nodes

## Step 3: Set up the worker node
# 1 - To start, run all the commands below. 
# These commands were run in the previous section, so just copy and paste them into your terminal as they are.
sudo apt install -y containerd
mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
systemctl restart containerd
sudo swapoff -a # to disable swapping temporarily
sudo sed -i '/ swap / s/^/#/' /etc/fstab 
sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
# install the necessary dependencies
sudo apt-get install -y apt-transport-https ca-certificates curl gpg socat docker.io
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
# install kubelet, kubeadm
sudo apt-get install -y kubelet kubeadm
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward

# 2 - To make this change persistent across reboots, edit /etc/sysctl.conf
nano /etc/sysctl.conf

# 3 - Add or uncomment this line:
net.ipv4.ip_forward=1

# 4 - Then apply the changes:
sudo sysctl -p

# 5 ** Now run the command that was provided to run attach the worker node
# line 62 Step 5

# 6 Label the worker node (perform on the master)
kubectl label nodes kube-work01 node-role.kubernetes.io/worker=true
kubectl get nodes --show-labels









